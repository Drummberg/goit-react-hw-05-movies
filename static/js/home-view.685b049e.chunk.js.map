{"version":3,"file":"static/js/home-view.685b049e.chunk.js","mappings":"4OAGaA,GAAYC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,iRAeTE,EAAKF,EAAAA,GAAAA,GAAH,qKAQFG,EAAMH,EAAAA,GAAAA,IAAH,qGAOHI,EAAKJ,EAAAA,GAAAA,GAAH,wK,mBC3BA,SAASK,EAAT,GAAgC,IAAXC,EAAU,EAAVA,OAClC,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,MACRC,GAAUC,EAAAA,EAAAA,MAgBhB,OAdAC,EAAAA,EAAAA,YAAU,WACJR,GACFC,EAASD,GAGXM,EAAQG,KAAK,CACXC,SAAS,GAAD,OAAKN,EAAMO,KACnBC,OAAO,SAAD,OAAWZ,GACjBa,MAAO,CACLC,KAAMZ,OAGT,CAACI,EAASF,EAAMO,IAAKX,KAGtB,SAACJ,EAAD,UACGE,EAAOiB,KAAI,YAAuC,IAApCC,EAAmC,EAAnCA,GAAIC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACxBC,EAAM,yCAAqCD,GACjD,OACE,UAACzB,EAAD,YACE,SAACC,EAAD,CAAK0B,IAAKF,EAAcC,EAASE,EAAUC,IAAKL,KAChD,SAAC3B,EAAD,CACEiC,GAAI,CACFd,SAAS,WAAD,OAAaM,GACrBH,MAAO,CAAEC,KAAMZ,IAHnB,SAMGe,GAAgBC,MARZF,U,gEC7BbS,EAAU,mCACVC,EAAW,+BAEXC,EAAkB,yCAAG,2GACFC,IAAAA,IAAA,UAClBF,EADkB,uCACqBD,IAFnB,uBACjBI,EADiB,EACjBA,KADiB,kBAIlBA,EAAKC,SAJa,2CAAH,qDAOlBC,EAAe,yCAAG,WAAMC,GAAN,8FACCJ,IAAAA,IAAA,UAClBF,EADkB,iCACeD,EADf,kBACgCO,IAFjC,uBACdH,EADc,EACdA,KADc,kBAIfA,EAAKC,SAJU,2CAAH,sDAOfG,EAAc,yCAAG,WAAMC,GAAN,4FACEN,IAAAA,IAAA,UAClBF,EADkB,kBACAQ,EADA,oBACmBT,EADnB,oBADF,cACfU,EADe,yBAIdA,EAASN,MAJK,2CAAH,sDAMdO,EAAc,yCAAG,WAAMF,GAAN,4FACEN,IAAAA,IAAA,UAClBF,EADkB,kBACAQ,EADA,4BAC2BT,EAD3B,oBADF,cACfU,EADe,yBAIdA,EAASN,KAAKQ,MAJA,2CAAH,sDAOdC,EAAgB,yCAAG,WAAMJ,GAAN,4FACAN,IAAAA,IAAA,UAClBF,EADkB,kBACAQ,EADA,4BAC2BT,EAD3B,2BADA,cACjBU,EADiB,yBAIhBA,EAASN,KAAKC,SAJE,2CAAH,sDAOhBS,EAAU,CACdZ,mBAAAA,EACAI,gBAAAA,EACAE,eAAAA,EACAG,eAAAA,EACAE,iBAAAA,GAEF,O,uHCzCe,SAASE,IACtB,OAA2BzC,EAAAA,EAAAA,UAAS,IAApC,eAAOD,EAAP,KAAe2C,EAAf,KAMA,OAJAjC,EAAAA,EAAAA,YAAU,WACRkC,EAAAA,EAAAA,qBAAyBC,MAAK,SAAA7C,GAAM,OAAI2C,EAAS3C,QAChD,KAGD,+BACE,SAAC,IAAD,CAAWA,OAAQA,Q","sources":["components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","services/fetchMovies.jsx","views/HomePage/HomePage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const StyleLink = styled(Link)`\n  display: block;\n  color: black;\n  font-size: 16px;\n  font-weight: 400;\n  border-bottom: 3px solid transparent;\n  text-decoration: none;\n  margin-right: 20px;\n  &:hover {\n    cursor: pointer;\n    color: white;\n    font-weigth: 700;\n  }\n`;\n\nexport const Li = styled.li`\n  margin-right: 15px;\n  text-align: center;\n  box-shadow: 0 7px 15px rgba(0, 0, 0, 0.281);\n  border-radius: 5px;\n  margin-bottom: 10px;\n`;\n\nexport const Img = styled.img`\n  height: auto;\n  width: 111px;\n  border-radius: 5px;\n  cursor: pointer;\n`;\n\nexport const Ul = styled.ul`\n  list-style: none;\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  background-color: grey;\n  padding-top: 50px;\n  margin: 0;\n`;\n","import { useEffect, useState } from 'react';\nimport { useLocation, useHistory, useRouteMatch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { StyleLink, Li, Img, Ul } from './MovieList.styled';\nimport notfound from '../../images/notfound.png';\n\nexport default function MovieList({ movies }) {\n  const [query, setQuery] = useState('');\n  const location = useLocation();\n  const match = useRouteMatch();\n  const history = useHistory();\n\n  useEffect(() => {\n    if (query) {\n      setQuery(query);\n    }\n\n    history.push({\n      pathname: `${match.url}`,\n      search: `query=${query}`,\n      state: {\n        from: location,\n      },\n    });\n  }, [history, match.url, query]);\n\n  return (\n    <Ul>\n      {movies.map(({ id, title, name, poster_path }) => {\n        const poster = `https://image.tmdb.org/t/p/w342${poster_path}`;\n        return (\n          <Li key={id}>\n            <Img src={poster_path ? poster : notfound} alt={name} />\n            <StyleLink\n              to={{\n                pathname: `/movies/${id}`,\n                state: { from: location },\n              }}\n            >\n              {title ? title : name}\n            </StyleLink>\n          </Li>\n        );\n      })}\n    </Ul>\n  );\n}\n\nMovieList.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n  }),\n};\n","import axios from 'axios';\n\nconst API_KEY = '1abcab100520369e11a771de2f4e2532';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst fetchPopularMovies = async () => {\n  const { data } = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`,\n  );\n  return data.results;\n};\n\nconst fetchMoviesName = async inputValue => {\n  const { data } = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${inputValue}`,\n  );\n  return data.results;\n};\n\nconst fetchMovieById = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`,\n  );\n  return response.data;\n};\nconst fetchFilmCasts = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`,\n  );\n  return response.data.cast;\n};\n\nconst fetchFilmReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`,\n  );\n  return response.data.results;\n};\n\nconst fetches = {\n  fetchPopularMovies,\n  fetchMoviesName,\n  fetchMovieById,\n  fetchFilmCasts,\n  fetchFilmReviews,\n};\nexport default fetches;\n","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport MovieList from '../../components/MovieList/MovieList';\nimport api from '../../services/fetchMovies';\n\nexport default function HomePage() {\n  const [movies, setMovie] = useState([]);\n\n  useEffect(() => {\n    api.fetchPopularMovies().then(movies => setMovie(movies));\n  }, []);\n\n  return (\n    <>\n      <MovieList movies={movies} />\n    </>\n  );\n}\n\nHomePage.propTypes = {\n  movies: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n  }),\n};\n"],"names":["StyleLink","styled","Link","Li","Img","Ul","MovieList","movies","useState","query","setQuery","location","useLocation","match","useRouteMatch","history","useHistory","useEffect","push","pathname","url","search","state","from","map","id","title","name","poster_path","poster","src","notfound","alt","to","API_KEY","BASE_URL","fetchPopularMovies","axios","data","results","fetchMoviesName","inputValue","fetchMovieById","movieId","response","fetchFilmCasts","cast","fetchFilmReviews","fetches","HomePage","setMovie","api","then"],"sourceRoot":""}