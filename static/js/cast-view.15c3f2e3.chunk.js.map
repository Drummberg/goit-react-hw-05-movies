{"version":3,"file":"static/js/cast-view.15c3f2e3.chunk.js","mappings":"qQAEaA,EAAMC,EAAAA,GAAAA,IAAH,iFAMHC,EAAKD,EAAAA,GAAAA,GAAH,sJAQFE,EAAOF,EAAAA,GAAAA,GAAH,qKAQJG,EAAQH,EAAAA,GAAAA,EAAH,+FAOLI,EAAOJ,EAAAA,GAAAA,EAAH,iG,SCzBF,SAASK,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAOR,OAJAE,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,eAAmBH,GAASI,KAAKL,KAChC,CAACC,KAGF,+BACE,SAACR,EAAD,UACGM,EAAMO,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACT,UAAChB,EAAD,YACE,SAACH,EAAD,CACEoB,IAAKH,EAAY,UAZpB,mCAYoB,OAAYA,GAAiBI,EAC9CC,IAAKJ,KAEP,SAACd,EAAD,UAAQc,KACR,SAACb,EAAD,UAAOc,MANEH,Y","sources":["components/Casts/Casts.styled.jsx","components/Casts/Casts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Img = styled.img`\n  height: auto;\n  width: 111px;\n  border-radius: 5px;\n`;\n\nexport const Ul = styled.ul`\n  list-style: none;\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  background-color: grey;\n  margin-top: 0;\n`;\n\nexport const List = styled.li`\n  margin-right: 15px;\n  text-align: center;\n  box-shadow: 0 7px 15px rgba(0, 0, 0, 0.281);\n  border-radius: 5px;\n  margin-bottom: 10px;\n`;\n\nexport const Title = styled.p`\n  color: blue;\n  margin: 0;\n  font-size: 14px;\n  font-weight: 700;\n`;\n\nexport const Char = styled.p`\n  color: yellow;\n  margin: 0;\n  font-size: 14px;\n  font-weight: 700;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport api from '../../services/fetchMovies';\nimport notfound from '../../images/notfound.png';\nimport { Img, Ul, List, Title, Char } from './Casts.styled';\n\nexport default function Casts() {\n  const [casts, setCasts] = useState([]);\n  const { movieId } = useParams();\n  const url = `https://image.tmdb.org/t/p/w200`;\n\n  useEffect(() => {\n    api.fetchFilmCasts(movieId).then(setCasts);\n  }, [movieId]);\n\n  return (\n    <>\n      <Ul>\n        {casts.map(({ id, profile_path, name, character }) => (\n          <List key={id}>\n            <Img\n              src={profile_path ? `${url}${profile_path}` : notfound}\n              alt={name}\n            />\n            <Title>{name}</Title>\n            <Char>{character}</Char>\n          </List>\n        ))}\n      </Ul>\n    </>\n  );\n}\n"],"names":["Img","styled","Ul","List","Title","Char","Casts","useState","casts","setCasts","movieId","useParams","useEffect","api","then","map","id","profile_path","name","character","src","notfound","alt"],"sourceRoot":""}